name: Deploy to GitHub (Docker)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create frontend Dockerfile
      run: |
        mkdir -p frontend-docker
        cat > frontend-docker/Dockerfile << 'EOF'
        FROM node:18-alpine as builder
        
        WORKDIR /app
        COPY frontend/package*.json ./
        RUN npm ci --only=production
        
        COPY frontend/ .
        RUN npm run build-css
        
        FROM nginx:alpine
        COPY --from=builder /app/public /usr/share/nginx/html
        COPY --from=builder /app/*.html /usr/share/nginx/html/
        
        # Create nginx config
        RUN cat > /etc/nginx/conf.d/default.conf << 'NGINXEOF'
        server {
            listen 80;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html;
            
            # Handle SPA routing
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API proxy to backend
            location /api/ {
                proxy_pass http://backend:8000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        NGINXEOF
        
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-docker
        file: ./frontend-docker/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create test docker-compose
      run: |
        cat > docker-compose.github.yml << 'EOF'
        version: '3.8'
        
        services:
          db:
            image: postgres:15
            environment:
              POSTGRES_DB: health_guide
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: postgres
            ports:
              - "5432:5432"
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          backend:
            image: ${{ needs.build-and-push.outputs.backend-image }}
            ports:
              - "8000:8000"
            environment:
              - DEBUG=True
              - SECRET_KEY=github-test-secret-key-not-for-production
              - DATABASE_URL=postgresql://postgres:postgres@db:5432/health_guide
              - REDIS_URL=redis://redis:6379/1
              - ALLOWED_HOSTS=localhost,127.0.0.1,backend
            depends_on:
              db:
                condition: service_healthy
              redis:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
              interval: 30s
              timeout: 10s
              retries: 5
              start_period: 40s
        
          frontend:
            image: ${{ needs.build-and-push.outputs.frontend-image }}
            ports:
              - "8080:80"
            depends_on:
              backend:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF
    
    - name: Start services
      run: |
        echo "Starting services with docker-compose..."
        docker-compose -f docker-compose.github.yml up -d
        
        echo "Waiting for services to be healthy..."
        timeout 300 bash -c 'until docker-compose -f docker-compose.github.yml ps | grep -q "healthy"; do echo "Waiting for services..."; sleep 10; done'
        
        echo "Services status:"
        docker-compose -f docker-compose.github.yml ps
    
    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        docker-compose -f docker-compose.github.yml exec -T backend python manage.py migrate --noinput
    
    - name: Run integration tests
      run: |
        echo "Testing backend health..."
        curl -f http://localhost:8000/admin/ || exit 1
        echo "✅ Backend health check passed"
        
        echo "Testing frontend health..."
        curl -f http://localhost:8080/health || exit 1
        echo "✅ Frontend health check passed"
        
        echo "Testing frontend serves content..."
        curl -f http://localhost:8080/ | grep -q "html" || exit 1
        echo "✅ Frontend serves HTML content"
        
        echo "Testing API endpoints..."
        if curl -f http://localhost:8080/api/ 2>/dev/null; then
          echo "✅ API endpoints accessible through frontend proxy"
        else
          echo "⚠️  API endpoints not accessible (may not be implemented yet)"
        fi
        
        echo "🚀 All tests passed! Deployment successful."
    
    - name: Show deployment URLs
      run: |
        echo "🌐 Deployment URLs (for local testing):"
        echo "Frontend: http://localhost:8080"
        echo "Backend: http://localhost:8000"
        echo "Backend Admin: http://localhost:8000/admin/"
        echo ""
        echo "📦 Docker Images:"
        echo "Backend: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Frontend: ${{ needs.build-and-push.outputs.frontend-image }}"
        echo ""
        echo "🐳 To run locally:"
        echo "docker pull ${{ needs.build-and-push.outputs.backend-image }}"
        echo "docker pull ${{ needs.build-and-push.outputs.frontend-image }}"
        echo "docker-compose -f docker-compose.github.yml up"
    
    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up..."
        docker-compose -f docker-compose.github.yml down -v
        docker system prune -f

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: GitHub Docker Release v${{ github.run_number }}
        body: |
          🐳 Docker Deployment Release v${{ github.run_number }}
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          **Docker Images:**
          - Backend: `${{ needs.build-and-push.outputs.backend-image }}`
          - Frontend: `${{ needs.build-and-push.outputs.frontend-image }}`
          
          **Quick Start:**
          ```bash
          # Pull the images
          docker pull ${{ needs.build-and-push.outputs.backend-image }}
          docker pull ${{ needs.build-and-push.outputs.frontend-image }}
          
          # Run with docker-compose
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          docker-compose up
          ```
          
          **Access URLs:**
          - Frontend: http://localhost:8080
          - Backend API: http://localhost:8000
          - Admin Panel: http://localhost:8000/admin/
        draft: false
        prerelease: false